name: Build container image and push into registry

# start on push on tag e.g. v0.0.0
on:
  push:
    # branches:
    #   - 'master'
    tags:
      - 'v*'

# trigger manually
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      version:
        description: 'version'
        required: true
        type: string

env:
  PROJECT_ID: quixotic-market-402317
  GAR_LOCATION: europe-west3

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Authentication via credentials json past credentials json into sectrets GCP_CREDENTIALS (in iam create service account and add key + download json file)
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Setup service account key
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" | base64 --decode > ./backend/src/service-credentials.json

      - name: Build and Push frontend container
        run: |-
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            cd ./frontend
            docker build -t cloud-project-frontend .
            docker tag cloud-project-frontend "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-frontend:${{ github.event.inputs.version }}-${{ github.event.inputs.env }}"
            docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-frontend:${{ github.event.inputs.version }}-${{ github.event.inputs.env }}"
          
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            cd ./frontend
            docker build -t cloud-project-frontend .
            docker tag cloud-project-frontend "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-frontend:${GITHUB_REF#refs/tags/}"
            docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-frontend:${GITHUB_REF#refs/tags/}"
          fi

      - name: Build and Push backend container
        run: |-
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            cd ./backend
            docker build -t cloud-project-backend .
            docker tag cloud-project-backend "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-backend:${{ github.event.inputs.version }}-${{ github.event.inputs.env }}"
            docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-backend:${{ github.event.inputs.version }}-${{ github.event.inputs.env }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            cd ./backend
            docker build -t cloud-project-backend .
            docker tag cloud-project-backend "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-backend:${GITHUB_REF#refs/tags/}"
            docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-backend:${GITHUB_REF#refs/tags/}"
          fi

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Configure kubectl
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials quixotic-market-402317-gke --region=us-central1-c
          kubectl config use-context quixotic-market-402317-gke

      - name: Create Kubernetes Secret
        env:
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          cd ./kubernetes
          kubectl create secret generic backend-secrets \
            --from-literal=CLIENT_ID=MTE3MjMy \
            --from-literal=CLIENT_SECRET=${CLIENT_SECRET} \
            --from-literal=REFRESH_TOKEN=${REFRESH_TOKEN}
      - name: Deploy to Kubernetes
        run: |
          cd ./kubernetes
          kubectl apply -f ingress-controller.yaml
          kubectl apply -f ingress.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl get all
         